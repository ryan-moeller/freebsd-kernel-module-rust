// Copyright (c) 2022 NCC Group
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Based on public domain code by Johannes Lundberg

//use crate::debugln;
use core::{fmt, ptr};
use libc::{c_char, c_void};

/// Empty structure that uses libcore's `fmt::Write` trait to provide
/// support for writing formatted arguments lists (as generated by the
/// built-in `format_args!()` macro`)
pub struct KernelDebugWriter {}

impl fmt::Write for KernelDebugWriter {
    fn write_str(&mut self, message: &str) -> fmt::Result {
        unsafe {
            let ptr = kernel_sys::malloc(
                message.len() + 1,
                &mut kernel_sys::M_DEVBUF[0],
                kernel_sys::M_WAITOK,
            ) as *mut c_char;
            ptr::copy(message.as_ptr(), ptr as *mut u8, message.len());
            ptr::write(ptr.add(message.len()), 0);
            kernel_sys::uprintf(ptr);
            kernel_sys::free(ptr as *mut c_void, &mut kernel_sys::M_DEVBUF[0]);
        }
        Ok(())
    }
}
